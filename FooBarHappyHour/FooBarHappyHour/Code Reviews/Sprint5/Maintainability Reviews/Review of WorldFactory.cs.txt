Review author: Keegan
Date: 11/14/2018
Sprint 5

File: World.cs
Authored by: Joel, Keegan, Abdullah, Bohan
Time taken for review: 15 minutes

using System.Xml;
using Microsoft.Xna.Framework;
using System;
using FooBarHappyHour.Interfaces;
using FooBarHappyHour.Blocks;
using FooBarHappyHour.Misc;
using FooBarHappyHour.Enemies;
using FooBarHappyHour.Items;
using FooBarHappyHour.Scenery;
using System.Collections.Generic;
using FooBarHappyHour.Utility;
using FooBarHappyHour.Teleporters;
using FooBarHappyHour.Score;

namespace FooBarHappyHour.Factories
{
    public static class WorldFactory
    {
        private static Dictionary<string, Action> BlocksDictionary(IWorld world, float xPosition, float yPosition) => new Dictionary<string, Action>
        {
                { "BeveledBlock", () => CreateBeveledBlock(world, xPosition, yPosition)},
                { "BrickBlock", () => CreateBrickBlock(world, xPosition, yPosition)},
                { "GroundBlock", () => CreateGroundBlock(world, xPosition, yPosition)},
                { "HiddenBlock", () => CreateHiddenBlock(world, xPosition, yPosition)},
                { "QuestionBlock", () => CreateQuestionBlock(world, xPosition, yPosition)},
                { "UsedBlock", () => CreateUsedBlock(world, xPosition, yPosition)},
                { "SmallPipe", () => CreateSmallPipe(world, xPosition, yPosition)},
                { "MediumPipe", () => CreateMediumPipe(world, xPosition, yPosition)},
                { "BigPipe", () => CreateBigPipe(world, xPosition, yPosition)},
        };

        public static IWorld CreatePrimaryWorld(int worldID)
        {
            XmlReader reader = XmlReader.Create("Content/Worlds/" + worldID.ToString() + "Primary.xml");
            reader.ReadToFollowing("Objects");
            reader.Read();
            reader.Read();
            IWorld world = new World.World(int.Parse(reader.GetAttribute("Width")), int.Parse(reader.GetAttribute("Major")), int.Parse(reader.GetAttribute("Minor")));
            while (reader.Read())
            {
                if (reader.NodeType == XmlNodeType.Element)
                {
                    string name = reader.Name;
                    string type = reader.GetAttribute("Type");
                    float xPosition = float.Parse(reader.GetAttribute("X"));
                    float yPosition = float.Parse(reader.GetAttribute("Y"));
                    CreateObjects(world, name, type, xPosition, yPosition);
                }
            }
            return world;
        }

        public static IWorld CreateHiddenWorld(int worldID)
        {
            XmlReader reader = XmlReader.Create("Content/Worlds/" + worldID.ToString() + "Hidden.xml");
            reader.ReadToFollowing("Objects");
            reader.Read();
            reader.Read();
            IWorld world = new World.World(int.Parse(reader.GetAttribute("Width")), int.Parse(reader.GetAttribute("Major")), int.Parse(reader.GetAttribute("Minor")));
            while (reader.Read())
            {
                if (reader.NodeType == XmlNodeType.Element)
                {
                    string name = reader.Name;
                    string type = reader.GetAttribute("Type");
                    float xPosition = float.Parse(reader.GetAttribute("X"));
                    float yPosition = float.Parse(reader.GetAttribute("Y"));
                    CreateObjects(world, name, type, xPosition, yPosition);
                }
            }
            return world;
        }

        private static void CreateObjects(IWorld world, string name, string type, float xPosition, float yPosition)
        {
            switch (name)
            {
                case "Player":
                    CreatePlayer(world, type, xPosition, yPosition);
                    break;
                case "Block":
                    CreateBlock(world, type, xPosition, yPosition);
                    break;
                case "Enemy":
                    CreateEnemy(world, type, xPosition, yPosition);
                    break;
                case "Item":
                    CreateItem(world, type, xPosition, yPosition);
                    break;
                case "Scenery":
                    CreateScenery(world, type, xPosition, yPosition);
                    break;
                case "Misc":
                    CreateMisc(world, type, xPosition, yPosition);
                    break;
                case "Teleporter":
                    CreateTeleporter(world, type, xPosition, yPosition);
                    break;
                default:
                    break;
            }
        }

        private static void CreatePlayer(IWorld world, string type, float xPosition, float yPosition)
        {
            switch (type)
            {
                case "Mario":
                    world.PlayerSpawn = new Vector2(xPosition, yPosition);
                    break;
                default:
                    break;
            }
        }

        private static void CreateBlock(IWorld world, string type, float xPosition, float yPosition)
        {
            var addBlock = BlocksDictionary(world, xPosition, yPosition);
            addBlock[type].Invoke();
        }

        private static void CreateEnemy(IWorld world, string type, float xPosition, float yPosition)
        {
            switch (type)
            {
                case "Goomba":
                    world.Enemies.Add(new Goomba(new Vector2(xPosition, yPosition)));
                    break;
                case "Koopa":
                    world.Enemies.Add(new Koopa(new Vector2(xPosition, yPosition)));
                    break;
                case "Piranha":
                    world.Enemies.Add(new PiranhaPlant(new Vector2(xPosition, yPosition)));
                    break;
                default:
                    break;
            }
        }

        private static void CreateItem(IWorld world, string type, float xPosition, float yPosition)
        {
            IBlock block = new HiddenBlock(new Vector2(0, 0));  // Get size of an arbitrary block to be size of local collision detection scope
            int blocksWidth = block.Rectangle.Width; ;
            int blocksHeight = block.Rectangle.Height;
            int blockIndexX = (int)Math.Floor(xPosition / blocksWidth);
            int blockIndexY = (int)Math.Floor(yPosition / blocksHeight);
            block = world.Blocks[blockIndexX][blockIndexY];
            IItem newItem=new NullItem();
            switch (type)
            {
                case "PowerUp":
                    newItem = new PowerUp(new Vector2(xPosition, yPosition), true,new CollectDelegate(ScoreManager.Instance.CollectPowerUp));
                    break;
                case "Coin":
                    newItem = new Coin(new Vector2(xPosition, yPosition),false, new CollectDelegate(ScoreManager.Instance.CollectNull));
                    break;
                case "GreenMushroom":
                    newItem = new GreenMushroom(new Vector2(xPosition, yPosition),new CollectDelegate(ScoreManager.Instance.CollectGreenMushroom));
                    break;
                case "Star":
                    newItem = new SuperStar(new Vector2(xPosition, yPosition),new CollectDelegate(ScoreManager.Instance.CollectStar));
                    break;
                case "StaticCoin":
                    newItem = new Coin(new Vector2(xPosition, yPosition), true, new CollectDelegate(ScoreManager.Instance.CollectCoin));
                    break;
                default:
                    newItem = new NullItem();
                    break;
            }
            if (block is null)
            {
                world.Items.Add(newItem);
            }
            world.AllUpdateable.Add(newItem);
            if (block is BrickBlock)
            {
                BrickBlock brickBlock = block as BrickBlock;
                brickBlock.AddItem(newItem);
            }
            else if (block is QuestionBlock)
            {
                QuestionBlock questionBlock = block as QuestionBlock;
                questionBlock.AddItem(newItem);
            }
            else if (block is HiddenBlock)
            {
                HiddenBlock hiddenBlock = block as HiddenBlock;
                hiddenBlock.AddItem(newItem);
            }
        }

        private static void CreateScenery(IWorld world, string type, float xPosition, float yPosition)
        {
            world.Scenery.Add(new SceneryObject(new Vector2(xPosition, yPosition), type));
        }

        private static void CreateMisc(IWorld world, string type, float xPosition, float yPosition)
        {
            switch (type)
            {
                case "FlagPole":
                    world.Flagpoles.Add(new Flagpole(new Vector2(xPosition, yPosition)));
                    break;
                case "Castle":
                    world.Castles.Add(new Castle(new Vector2(xPosition, yPosition)));
                    break;
                default:
                    break;
            }
        }

        private static void CreateTeleporter(IWorld world, string type, float xPosition, float yPosition)
        {
            switch (type)
            {
                case "InTeleporter":
                    world.InTeleporter = new Teleporter(new Vector2(xPosition, yPosition), false);
                    break;
                case "OutTeleporter":
                    world.OutTeleporter = new Teleporter(new Vector2(xPosition, yPosition), true);
                    break;
                default:
                    break;
            }
        }

        private static void CreateBeveledBlock(IWorld world, float xPosition, float yPosition) => world.Blocks[(int)xPosition / Utils.Instance.CommonObjectSize][(int)yPosition / Utils.Instance.CommonObjectSize] = new BeveledBlock(new Vector2(xPosition, yPosition));

        private static void CreateBrickBlock(IWorld world, float xPosition, float yPosition) => world.Blocks[(int)xPosition / Utils.Instance.CommonObjectSize][(int)yPosition / Utils.Instance.CommonObjectSize] = new BrickBlock(new Vector2(xPosition, yPosition));

        private static void CreateGroundBlock(IWorld world, float xPosition, float yPosition) => world.Blocks[(int)xPosition / Utils.Instance.CommonObjectSize][(int)yPosition / Utils.Instance.CommonObjectSize] = new GroundBlock(new Vector2(xPosition, yPosition));

        private static void CreateHiddenBlock(IWorld world, float xPosition, float yPosition) => world.Blocks[(int)xPosition / Utils.Instance.CommonObjectSize][(int)yPosition / Utils.Instance.CommonObjectSize] = new HiddenBlock(new Vector2(xPosition, yPosition));

        private static void CreateQuestionBlock(IWorld world, float xPosition, float yPosition) => world.Blocks[(int)xPosition / Utils.Instance.CommonObjectSize][(int)yPosition / Utils.Instance.CommonObjectSize] = new QuestionBlock(new Vector2(xPosition, yPosition));

        private static void CreateUsedBlock(IWorld world, float xPosition, float yPosition) => world.Blocks[(int)xPosition / Utils.Instance.CommonObjectSize][(int)yPosition / Utils.Instance.CommonObjectSize] = new UsedBlock(new Vector2(xPosition, yPosition));

        private static void CreateSmallPipe(IWorld world, float xPosition, float yPosition) => world.Blocks[(int)xPosition / Utils.Instance.CommonObjectSize][(int)yPosition / Utils.Instance.CommonObjectSize] = new Pipe(new Vector2(xPosition, yPosition), Utils.Instance.SmallPipe);

        private static void CreateMediumPipe(IWorld world, float xPosition, float yPosition) => world.Blocks[(int)xPosition / Utils.Instance.CommonObjectSize][(int)yPosition / Utils.Instance.CommonObjectSize] = new Pipe(new Vector2(xPosition, yPosition), Utils.Instance.MediumPipe);

        private static void CreateBigPipe(IWorld world, float xPosition, float yPosition) => world.Blocks[(int)xPosition / Utils.Instance.CommonObjectSize][(int)yPosition / Utils.Instance.CommonObjectSize] = new Pipe(new Vector2(xPosition, yPosition), Utils.Instance.BigPipe);
    }
}

This class has been an issue for a while now and because of the way objects are loaded into the world, the complexity has gone up.
I think that this class is looking too far into objects and manipulating their state when all it should do is spawn the objects.
By having the class just spawn objects at a certain location this class could look at a lot better and also be easier to change and
modify in the future. Eventually this class should be converted fully to a dictionary so that all game objects will be spawned
in a similar manner reducing complexity.